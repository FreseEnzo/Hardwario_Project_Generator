{# app_config_c.j2 #}
/*
 * Copyright (c) 2023 HARDWARIO a.s.
 *
 * SPDX-License-Identifier: LicenseRef-HARDWARIO-5-Clause
 */
{%- for config_c_include in config_c_includes %}
#include {{config_c_include}}
{%- endfor %}

/* CHESTER includes */
{%- for app_config_c_include in app_config_c_includes %}
#include {{app_config_c_include}}
{%- endfor %}

/* Zephyr includes */
{%- for zephyr_config_c_include in zephyr_config_c_includes %}
#include {{ zephyr_config_c_include }}
{%- endfor %}

/* Standard includes */
{%- for std_include in standard_config_includes %}
#include {{ std_include }}
{%- endfor %}

LOG_MODULE_REGISTER(app_config, LOG_LEVEL_DBG);

#define SETTINGS_PFX "{{ setting_pfx['name'] }}"

struct app_config g_app_config;

{% if struct_data %}
static struct app_config g_app_config = {
{% for param in struct_data['parameters'] %}
    .{{ param['var'] }} = {{ param['default'] }},
{%- endfor %}
};
{% endif %}
{% for parameter in parameters %}
{%- if parameter['type'] == 'bool' %}
static void print_{{ parameter['var'] }}(const struct shell *shell){                                   
{%- raw -%}
{% endraw %}
    shell_print(shell, "app config {{ parameter['name'] }}  %s", m_app_config_interim.{{ parameter['var'] }} ? "true" : "false");                      
{%- raw -%}
{% endraw %}
}

int app_config_cmd_config_{{ parameter['var'] }}(const struct shell *shell, size_t argc, char **argv){
{%- raw -%}
{% endraw %}
    if (argc == 1) {
        print_{{ parameter['var'] }}(shell);                                                    
        return 0;
    }
    if (argc == 2) {
        bool is_false = !strcmp(argv[1], "false");
        bool is_true = !strcmp(argv[1], "true");
        if (is_false) {
            m_app_config_interim.{{ parameter['var'] }} = false;
        } else if (is_true) {
            m_app_config_interim.{{ parameter['var'] }} = true;
        } else {
            shell_error(shell, "invalid format");
            return -EINVAL;
        }
        return 0;
    }
    shell_help(shell);
    return -EINVAL;
}
{%- endif %}

{%- if parameter['type'] == 'int' %}
static void print_{{ parameter['var'] }}(const struct shell *shell){                               
{%- raw -%}
{% endraw %}
    shell_print(shell, "app config  {{ parameter['name'] }}  %d", m_app_config_interim.{{ parameter['var'] }});
{%- raw -%}
{% endraw %}
}

int app_config_cmd_config_{{ parameter['var'] }}(const struct shell *shell, size_t argc, char **argv){ 
{%- raw -%}
{% endraw %}
    if (argc == 1) {
        print_{{ parameter['var'] }}(shell);
        return 0;
    }
    if (argc == 2) {
        size_t len = strlen(argv[1]);
        for (size_t i = 0; i < len; i++) {
            if (!isdigit((int)argv[1][i])) {
                shell_error(shell, "invalid format");
                return -EINVAL;
            }
        }
        long value = strtol(argv[1], NULL, 10);
        if (value < {{ parameter['min'] }} || value > {{ parameter['max'] }}) {
            shell_error(shell, "invalid range");
            return -EINVAL;
        }
        m_app_config_interim.{{ parameter['var'] }} = (int)value;
        return 0;
    }
    shell_help(shell);
    return -EINVAL;
}
{%- endif %}

{%- if parameter['type'] == 'float' %}
static void print_{{ parameter['var'] }}(const struct shell *shell){                                  
{%- raw -%}
{% endraw %}
    shell_print(shell, "app config {{ parameter['name'] }} %.1f", m_app_config_interim.{{ parameter['var'] }});
{%- raw -%}
{% endraw %}
}

int app_config_cmd_config_{{ parameter['var'] }}(const struct shell *shell, size_t argc, char **argv){
{%- raw -%}
{% endraw %}
    if (argc == 1) {
        print_{{ parameter['var'] }}(shell);
        return 0;
    }
    if (argc == 2) {
        float value;
        int ret = sscanf(argv[1], "%f", &value);
        if (ret != 1) {
            shell_error(shell, "invalid value");
            return -EINVAL;
        }
        if (value < {{ parameter['min'] }} || value > {{ parameter['max'] }}) {
            shell_error(shell, "invalid range");
            return -EINVAL;
        }
        m_app_config_interim.{{ parameter['var'] }} = value;
        return 0;
    }
    shell_help(shell);
    return -EINVAL;
}
{%- endif %}
{% endfor %}
// Function to handle setting configurations
static int set_setting(const char *key, size_t len, settings_read_cb read_cb, void *cb_arg) {
    int ret;
    const char *next;
{% for parameter in data['parameters'] %}
{%- if parameter['type'] == 'bool' or parameter['type'] == 'float' or parameter['type'] == 'int' -%}
        if (settings_name_steq(key, "{{ parameter['name'] }}", &next) && !next) {
            if (len != sizeof(m_app_config_interim.{{ parameter['var'] }})) {
                return -EINVAL;
            }
            ret = read_cb(cb_arg, &m_app_config_interim.{{ parameter['var'] }}, len);
            if (ret < 0) {
                LOG_ERR("Call `read_cb` failed: %d", ret);
                return ret;
            }
            return 0;
        }
{% endif %}
{% endfor %}
}
// Function to export configurations
static int export_settings(int (*export_func)(const char *name, const void *val, size_t val_len)) {
    int ret;

{%- for parameter in data['parameters'] -%}
{%- if parameter['type'] == 'bool' or parameter['type'] == 'float' or parameter['type'] == 'int' %}
    if (settings_name_steq(key, "{{parameter['name']}}", &next) && !next) {
        if (len != sizeof(m_app_config_interim.{{parameter['var']}})) {
            return -EINVAL;
        }
        ret = read_cb(cb_arg, &m_app_config_interim.{{parameter['var']}}, len);
        if (ret < 0) {
            LOG_ERR("Call `read_cb` failed: %d", ret);
            return ret;
        }
        return 0;
    }
{% endif %}
{%- endfor -%}
}

// Initialization function
static int init(void) {
    int ret;

    LOG_INF("System initialization");

    static struct settings_handler sh = {
        .name = SETTINGS_PFX,
        .h_set = set_setting,
        .h_commit = commit_settings,
        .h_export = export_settings,
    };

    ret = settings_register(&sh);

    if (ret < 0) {
        LOG_ERR("Call `settings_register` failed: %d", ret);
        return ret;
    }

    ret = settings_load_subtree(SETTINGS_PFX);

    if (ret < 0) {
        LOG_ERR("Call `settings_load_subtree` failed: %d", ret);
        return ret;
    }

{%- for command in data['commands'] -%}
    {%- if command['name'] == 'show' %}
    ctr_config_append_show(SETTINGS_PFX, app_config_cmd_config_show)
    {% endif -%}
{%- endfor %}

    return 0;
}

SYS_INIT(init, APPLICATION, CONFIG_APPLICATION_INIT_PRIORITY);