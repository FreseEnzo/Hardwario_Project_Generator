/*
 * Copyright (c) 2023 HARDWARIO a.s.
 *
 * SPDX-License-Identifier: LicenseRef-HARDWARIO-5-Clause
 */

#ifndef APP_CONFIG_H_
#define APP_CONFIG_H_

/* Includes ------------------------------------------------------------------*/

/* Private includes --------------------------------------------------------------------*/

/* Zephyr includes */
#include <zephyr/shell/shell.h>

/* Standard includes */
#include <stdbool.h>
#include <stddef.h>

/* USER CODE BEGIN Includes */
/* USER CODE END Includes */

#ifdef __cplusplus
extern "C" {
#endif
{%- set variant_name_lower = variant_name|lower %}
{% if variant_name_lower.split(' ')[0] == 'current' %}
#define APP_CONFIG_CHANNEL_COUNT 4
{% endif %}
/* Private Variables -------------------------------------------------------------------*/
{% for variant, variant_dsc in chester_variants.items() -%}
    {%- if variant == variant_name %}
        {%- if 'ctr_lte' in variant_dsc.values() and 'ctr_lrw' in variant_dsc.values() %}
enum app_config_mode {
	APP_CONFIG_MODE_NONE = 0,
	APP_CONFIG_MODE_LTE = 1,
	APP_CONFIG_MODE_LRW = 2,
};
        {%- endif %}
    {%- endif %}
{%- endfor %}
{% if data %}
struct app_config {
    {%- for variant, variant_dsc in chester_variants.items() %}
    {%- if variant == variant_name %}
        {%- if 'ctr_lte' in variant_dsc.values() and 'ctr_lrw' in variant_dsc.values() %}
    enum app_config_mode mode;
        {%- endif %}
    {%- endif %}
{%- endfor %}
    {% for param in data['parameters'] %}
        {%- if param['type'] == 'string'  %}
    char {{ param['var'] }} [{{param['len']}}];
        {% elif param['type'].split('[')[0] == 'array'%};
    {{param['type'].split('[')[1][0:-1]}} {{ param['var'] }}[{{param['len']}}];
        {%- else %}
    {{ param['type'] }} {{ param['var'] }};
        {%- endif %}
    {%- endfor %}

    /* USER CODE BEGIN Struct Variables */
    /* USER CODE END Struct Variables */
};
{% endif %}
extern struct app_config g_app_config;

/* USER CODE BEGIN Variables */
/* USER CODE END Variables */

/* Private Functions -------------------------------------------------------------------*/
{% for variant, variant_dsc in chester_variants.items() -%}
    {%- if variant == variant_name %}
        {%- if 'ctr_lte' in variant_dsc.values() and 'ctr_lrw' in variant_dsc.values() %}
int app_config_cmd_config_mode(const struct shell *shell, size_t argc, char **argv);
        {%- endif %}
    {%- endif %}
{%- endfor %}
int app_config_cmd_config_show(const struct shell *shell, size_t argc, char **argv);

{%- for parameter in data['parameters'] %}
{%- if parameter['type'] == 'bool' or parameter['type'] == 'int' or parameter['type'] == 'float' or parameter['type'].split('[')[0] == 'array'  %}
int app_config_cmd_config_{{ parameter['var'] }}(const struct shell *shell, size_t argc, char **argv);
{%- endif %}
{%- endfor %}

{% if variant_name  == 'current' %}
int app_config_get_interval_report(void);
int app_config_set_interval_report(int value);
{%- endif %}

/* USER CODE BEGIN Functions 1 */
/* USER CODE END Functions 1 */

#ifdef __cplusplus
}
#endif

#endif /* APP_CONFIG_H_ */