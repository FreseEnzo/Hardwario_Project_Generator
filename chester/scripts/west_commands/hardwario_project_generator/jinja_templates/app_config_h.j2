/*
 * Copyright (c) 2024 HARDWARIO a.s.
 *
 * SPDX-License-Identifier: LicenseRef-HARDWARIO-5-Clause
 */

{%- set variant_name_lower = variant_name|lower %}
{%- set config_mode = []%}
{%- if 'lte' and 'lrw' in data['features']-%}
	{%- do config_mode.append(1) %}
{% endif %}
#ifndef APP_CONFIG_H_
#define APP_CONFIG_H_

/* Includes ------------------------------------------------------------------*/
/* Private includes --------------------------------------------------------------------*/

/* Zephyr includes */
#include <zephyr/shell/shell.h>

/* Standard includes */
#include <stdbool.h>
#include <stddef.h>

/* USER CODE BEGIN Includes */
/* USER CODE END Includes */

#ifdef __cplusplus
extern "C" {
#endif

{#- K1 #}
{%- for feature in data['features'] %}
	{%- if feature == 'k1' %}

#define APP_CONFIG_CHANNEL_COUNT 4          
	{%- endif %}
{%- endfor %}

/* Private Variables -------------------------------------------------------------------*/
{#- MODE LTE-LRW #}
{%- if config_mode %}
enum app_config_mode {
	APP_CONFIG_MODE_NONE = 0,
	APP_CONFIG_MODE_LTE = 1,
	APP_CONFIG_MODE_LRW = 2,
};
{% endif -%}

{#- VARIANT INPUT#}
{%- if variant_name_lower.split(' ')[0] == 'input' %}
enum app_config_input_type {
	APP_CONFIG_INPUT_TYPE_NPN = 0,
	APP_CONFIG_INPUT_TYPE_PNP = 1,
};
{% endif %}

{#- STRUCT #}
{%- if data %}
struct app_config {
{#- MODE LTE-LRW #}
{%- if config_mode %}
	enum app_config_mode mode;
{%- endif -%}

{#- VARIANT INPUT#}
{%- if variant_name_lower.split(' ')[0] == 'input' %}
	enum app_config_input_type trigger_input_type;
	enum app_config_input_type counter_input_type;
{%- endif %}
	{%- for param in data['parameters'] %}
		{%- if param['type'] == 'string'  %}
	char {{ param['var'] }} [{{param['len']}}];
		{% elif param['type'].split('[')[0] == 'array'%}
	{{param['type'].split('[')[1][0:-1]}} {{ param['var'] }}[{{param['len']}}];
		{%- else %}
	{{ param['type'] }} {{ param['var'] }};
		{%- endif %}
	{%- endfor %}

	/* USER CODE BEGIN Struct Variables */
	/* USER CODE END Struct Variables */
};
{% endif %}
extern struct app_config g_app_config;

/* USER CODE BEGIN Variables */
/* USER CODE END Variables */

/* Private Functions -------------------------------------------------------------------*/
{%- if config_mode %}
int app_config_cmd_config_mode(const struct shell *shell, size_t argc, char **argv);
{%- endif %}
int app_config_cmd_config_show(const struct shell *shell, size_t argc, char **argv);

{%- for parameter in data['parameters'] %}
{%- if parameter['type'] == 'bool' or parameter['type'] == 'int' or parameter['type'] == 'float' or parameter['type'].split('[')[0] == 'array'  %}
int app_config_cmd_config_{{ parameter['var'] }}(const struct shell *shell, size_t argc, char **argv);
{%- endif %}
{%- endfor %}
{#- VARIANT CURRENT#}
{%- if variant_name_lower.split(' ')[0] == 'current' %}
int app_config_get_interval_report(void);
int app_config_set_interval_report(int value);
{%- endif %}
{#- VARIANT INPUT#}
{%- if variant_name_lower.split(' ')[0] == 'input' %}
int app_config_cmd_config_trigger_input_type(const struct shell *shell, size_t argc, char **argv);
int app_config_cmd_config_counter_input_type(const struct shell *shell, size_t argc, char **argv);
{%- endif %}

/* USER CODE BEGIN Functions 1 */
/* USER CODE END Functions 1 */

#ifdef __cplusplus
}
#endif

#endif /* APP_CONFIG_H_ */