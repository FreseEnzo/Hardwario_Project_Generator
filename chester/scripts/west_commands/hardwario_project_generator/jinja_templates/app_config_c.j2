/*
 * Copyright (c) 2023 HARDWARIO a.s.
 *
 * SPDX-License-Identifier: LicenseRef-HARDWARIO-5-Clause
 */

/* Includes ------------------------------------------------------------------*/

#include "app_config.h"

/* Private includes --------------------------------------------------------------------*/

/* CHESTER includes */
#include <chester/ctr_config.h>

/* Zephyr includes */
#include <zephyr/init.h>
#include <zephyr/kernel.h>
#include <zephyr/logging/log.h>
#include <zephyr/settings/settings.h>
#include <zephyr/shell/shell.h>

/* Standard includes */
#include <ctype.h>
#include <stdbool.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

/* USER CODE BEGIN Includes */
/* USER CODE END Includes */

LOG_MODULE_REGISTER(app_config, LOG_LEVEL_DBG);

/* Private Variables -------------------------------------------------------------------*/

#define SETTINGS_PFX "{{ setting_pfx }}"

struct app_config g_app_config;
{% if data %}
static struct app_config m_app_config_interim = {
{% for param in data['parameters'] %}
    {% if param['type'] == 'string'  -%}
    .{{ param['var'] }} = "{{ param['default'] }}",
    {%- elif param['type'] == 'bool' -%}
    .{{ param['var'] }} = {{ param['default'] | lower }},
    {%- else -%}
    .{{ param['var'] }} = {{ param['default'] }},
    {%- endif -%}
{%- endfor %}

{%- for feature in data['features'] %}
    {%- if feature == 'lte' and 'lorawan' not in data['features'] %}
    .mode = APP_CONFIG_MODE_LTE,
    {%- elif feature == 'lorawan' and 'lte' not in data['features'] %}
    .mode = APP_CONFIG_MODE_LRW,
    {%- endif %}
{%- endfor %}
{# Se nenhum dos casos anteriores se aplicar #}
{%- if ('lte' not in data['features'] and 'lorawan' not in data['features']) or ('lte' in data['features'] and 'lorawan' in data['features']) %}
    .mode = APP_CONFIG_MODE_NONE,
{%- endif %}
};
{%- endif %}

/* USER CODE BEGIN Variables */
/* USER CODE END Variables */

/* Private Functions -------------------------------------------------------------------*/
{% for parameter in parameters %}
{%- if parameter['type'] == 'bool' %}
static void print_{{ parameter['var'] }}(const struct shell *shell)
{                                   
{%- raw -%}
{% endraw %}
    shell_print(shell, "app config {{ parameter['name'] }}  %s", m_app_config_interim.{{ parameter['var'] }} ? "true" : "false");                      
{%- raw -%}
{% endraw %}
}

int app_config_cmd_config_{{ parameter['var'] }}(const struct shell *shell, size_t argc, char **argv)
{
{%- raw -%}
{% endraw %}
    if (argc == 1) {
        print_{{ parameter['var'] }}(shell);                                                    
        return 0;
    }
    if (argc == 2) {
        bool is_false = !strcmp(argv[1], "false");
        bool is_true = !strcmp(argv[1], "true");
        if (is_false) {
            m_app_config_interim.{{ parameter['var'] }} = false;
        } else if (is_true) {
            m_app_config_interim.{{ parameter['var'] }} = true;
        } else {
            shell_error(shell, "invalid format");
            return -EINVAL;
        }
        return 0;
    }
    shell_help(shell);
    return -EINVAL;
}
{%- endif %}

{%- if parameter['type'] == 'int' %}
static void print_{{ parameter['var'] }}(const struct shell *shell)
{                               
{%- raw -%}
{% endraw %}
    shell_print(shell, "app config  {{ parameter['name'] }}  %d", m_app_config_interim.{{ parameter['var'] }});
{%- raw -%}
{% endraw %}
}

int app_config_cmd_config_{{ parameter['var'] }}(const struct shell *shell, size_t argc, char **argv)
{ 
{%- raw -%}
{% endraw %}
    if (argc == 1) {
        print_{{ parameter['var'] }}(shell);
        return 0;
    }
    if (argc == 2) {
        size_t len = strlen(argv[1]);
        for (size_t i = 0; i < len; i++) {
            if (!isdigit((int)argv[1][i])) {
                shell_error(shell, "invalid format");
                return -EINVAL;
            }
        }
        long value = strtol(argv[1], NULL, 10);
        if (value < {{ parameter['min'] }} || value > {{ parameter['max'] }}) {
            shell_error(shell, "invalid range");
            return -EINVAL;
        }
        m_app_config_interim.{{ parameter['var'] }} = (int)value;
        return 0;
    }
    shell_help(shell);
    return -EINVAL;
}
{%- endif %}

{%- if parameter['type'] == 'float' %}
static void print_{{ parameter['var'] }}(const struct shell *shell)
{                                  
{%- raw -%}
{% endraw %}
    shell_print(shell, "app config {{ parameter['name'] }} %.1f", m_app_config_interim.{{ parameter['var'] }});
{%- raw -%}
{% endraw %}
}

int app_config_cmd_config_{{ parameter['var'] }}(const struct shell *shell, size_t argc, char **argv)
{
{%- raw -%}
{% endraw %}
    if (argc == 1) {
        print_{{ parameter['var'] }}(shell);
        return 0;
    }
    if (argc == 2) {
        float value;
        int ret = sscanf(argv[1], "%f", &value);
        if (ret != 1) {
            shell_error(shell, "invalid value");
            return -EINVAL;
        }
        if (value < {{ parameter['min'] }} || value > {{ parameter['max'] }}) {
            shell_error(shell, "invalid range");
            return -EINVAL;
        }
        m_app_config_interim.{{ parameter['var'] }} = value;
        return 0;
    }
    shell_help(shell);
    return -EINVAL;
}
{%- endif %}
{%- if parameter['type'] == 'string' %}
static void print_{{ parameter['var'] }}(const struct shell *shell)
{                                  
{%- raw -%}
{% endraw %}
    shell_print(shell, "app config {{ parameter['name'] }} %.1f", m_app_config_interim.{{ parameter['var'] }});
{%- raw -%}
{% endraw %}
}
int app_config_cmd_config_{{ parameter['var'] }}(const struct shell *shell, size_t argc, char **argv)
{
{%- raw -%}
{% endraw %}
    if (argc == 1) {
        print_{{ parameter['var'] }}(shell);
        return 0;
    }
    if (argc == 2) {
            size_t len = strlen(argv[1]);

            if (len >= sizeof(m_config_interim.{{ parameter['var'] }})) {
                shell_error(shell, "invalid format");
                return -EINVAL;
            }

            for (size_t i = 0; i < len; i++) {
                char c = argv[1][i];
                if (!isalnum((int)c) && c != '-' && c != '.') {
                    shell_error(shell, "invalid format");
                    return -EINVAL;
                }
            }

            strcpy(m_config_interim.{{ parameter['var'] }}, argv[1]);
            return 0;
        }
    shell_help(shell);
    return -EINVAL;
}
{%- endif %}
{% endfor %}
/* USER CODE BEGIN Functions 1 */
/* USER CODE END Functions 1 */

static int h_commit(void)
{
	LOG_DBG("Loaded settings in full");
	memcpy(&g_app_config, &m_app_config_interim, sizeof(g_app_config));
	return 0;
}

static int h_set(const char *key, size_t len, settings_read_cb read_cb, void *cb_arg) {
    int ret;
    const char *next;
{% for parameter in data['parameters'] %}
{%- if parameter['type'] == 'bool' or parameter['type'] == 'float' or parameter['type'] == 'int' or parameter['type'] == 'string' %}
    if (settings_name_steq(key, "{{ parameter['name'] }}", &next) && !next) {
        if (len != sizeof(m_app_config_interim.{{ parameter['var'] }})) {
            return -EINVAL;
        }
        ret = read_cb(cb_arg, &m_app_config_interim.{{ parameter['var'] }}, len);
        if (ret < 0) {
            LOG_ERR("Call `read_cb` failed: %d", ret);
            return ret;
        }
        return 0;
}
{% endif %}
{% endfor %}
/* USER CODE BEGIN Functions 2 */
/* USER CODE END Functions 2 */
}

static int h_export(int (*export_func)(const char *name, const void *val, size_t val_len)) {
    int ret;

{%- for parameter in data['parameters'] -%}
{%- if parameter['type'] == 'bool' or parameter['type'] == 'float' or parameter['type'] == 'int'or parameter['type'] == 'string' %}
    ret = export_func("{{parameter['name']}}", & m_app_config_interim.{{parameter['var']}}, sizeof( m_app_config_interim.{{parameter['var']}}));
    if (ret < 0) {
        return ret;
    }
{% endif %}
{%- endfor -%}
/* USER CODE BEGIN Functions 3 */
/* USER CODE END Functions 3 */
}


// Initialization function
static int init(void) {
    int ret;

    LOG_INF("System initialization");

    static struct settings_handler sh = {
        .name = SETTINGS_PFX,
        .h_set = h_set,
        .h_commit = h_commit,
        .h_export = h_export,
    };

    ret = settings_register(&sh);

    if (ret < 0) {
        LOG_ERR("Call `settings_register` failed: %d", ret);
        return ret;
    }

    ret = settings_load_subtree(SETTINGS_PFX);

    if (ret < 0) {
        LOG_ERR("Call `settings_load_subtree` failed: %d", ret);
        return ret;
    }

{%- for command in data['commands'] -%}
    {%- if command['name'] == 'show' %}
    ctr_config_append_show(SETTINGS_PFX, app_config_cmd_config_show)
    {% endif -%}
{%- endfor %}


/* USER CODE BEGIN Functions 4 */
/* USER CODE END Functions 4 */

    return 0;
}

SYS_INIT(init, APPLICATION, CONFIG_APPLICATION_INIT_PRIORITY);