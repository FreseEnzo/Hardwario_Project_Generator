{#- GLOBAL VARIABLES #}
{%- set variant_name_lower = variant_name|lower -%}
{%- set config_mode = [] -%}

{#- COPYRIGHT AND LICENSE #}
{%- if 'lte' in data['features'] and 'lrw' in data['features'] -%}
	{%- do config_mode.append(1) %}
{%- endif %}
{%- if data['project']['company'] or data['project']['license'] -%}
/*
	{%- if data['project']['company'] %}
 * Copyright (c) {{data['project']['company']}}
	{%- endif %}
	{%- if data['project']['company'] and data['project']['license'] %}
 * 
	{%- endif %}
	{%- if data['project']['license'] %}
 * {{data['project']['license'] }}
	{%- endif %}
 */
{% raw %}
{% endraw %}
{%- endif -%}

#include "app_config.h"

/* CHESTER includes */
#include <chester/ctr_config.h>

/* Zephyr includes */
#include <zephyr/init.h>
#include <zephyr/kernel.h>
#include <zephyr/logging/log.h>
#include <zephyr/settings/settings.h>
#include <zephyr/shell/shell.h>

/* Standard includes */
#include <ctype.h>
#include <stdbool.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

/* USER CODE BEGIN Includes */
/* USER CODE END Includes */

LOG_MODULE_REGISTER(app_config, LOG_LEVEL_DBG);

#define SETTINGS_PFX "{{ setting_pfx }}"

struct app_config g_app_config;

{#- STRUCT #}
{% if data %}
static struct app_config m_app_config_interim = {
{%- for param in data['parameters'] %}
	{%- if param['default'] != none %}
	{% if param['type'] == 'string'  -%}
	.{{ param['var'] }} = "{{ param['default'] }}",
	{%- elif param['type'] == 'bool' -%}
	.{{ param['var'] }} = {{ param['default'] | lower }},
	{%- else -%}
	.{{ param['var'] }} = {{ param['default'] }},
	{%- endif -%}
	{%- endif %}
{%- endfor -%}

{#- MODE LTE-LRW #}
{%- if config_mode %}
	.mode = APP_CONFIG_MODE_LTE,
{%- endif -%}

{#- VARIANT INPUT #}
{%- if variant_name_lower.split(' ')[0] == 'input' %}
	.trigger_input_type = APP_CONFIG_INPUT_TYPE_NPN,
	.counter_input_type = APP_CONFIG_INPUT_TYPE_NPN,
{%- endif %}

	/* USER CODE BEGIN Struct Variables */
	/* USER CODE END Struct Variables */
};
{%- endif %}
{% raw %}
/* USER CODE BEGIN Variables */
/* USER CODE END Variables */
{% endraw %}

{#- MODE LTE-LRW #}
{%- if config_mode %}
static void print_app_config_mode(const struct shell *shell)
{
	const char *mode;
	switch (m_app_config_interim.mode) {
	case APP_CONFIG_MODE_NONE:
		mode = "none";
		break;
	case APP_CONFIG_MODE_LTE:
		mode = "lte";
		break;
	case APP_CONFIG_MODE_LRW:
		mode = "lrw";
		break;
	default:
		mode = "(unknown)";
		break;
	}

	shell_print(shell, "app config mode %s", mode);
}

int app_config_cmd_config_mode(const struct shell *shell, size_t argc, char **argv)
{
	if (argc == 1) {
		print_app_config_mode(shell);
		return 0;
	}

	if (argc == 2) {
		if (!strcmp("none", argv[1])) {
			m_app_config_interim.mode = APP_CONFIG_MODE_NONE;
			return 0;
		}

		if (!strcmp("lte", argv[1])) {
			m_app_config_interim.mode = APP_CONFIG_MODE_LTE;
			return 0;
		}

		if (!strcmp("lrw", argv[1])) {
			m_app_config_interim.mode = APP_CONFIG_MODE_LRW;
			return 0;
		}

		shell_error(shell, "invalid option");

		return -EINVAL;
	}

	shell_help(shell);

	return -EINVAL;
}
{%- endif %}

{#- VARIANT CURRENT #}
{%- if variant_name_lower.split(' ')[0] == 'current' %}
int app_config_get_interval_report(void)
{
	return m_app_config_interim.interval_report;
}

int app_config_set_interval_report(int value)
{
	if (value < 30 || value > 86400) {
		return -ERANGE;
	}

	m_app_config_interim.interval_report = value;

	return 0;
}
{%- endif %}

{#- VARIANT INPUT #}
{%- if variant_name_lower.split(' ')[0] == 'input' %}
static void print_counter_input_type(const struct shell *shell)
{
	const char *type;

	switch (m_app_config_interim.counter_input_type) {
	case APP_CONFIG_INPUT_TYPE_NPN:
		type = "npn";
		break;
	case APP_CONFIG_INPUT_TYPE_PNP:
		type = "pnp";
		break;
	default:
		type = "(unknown)";
		break;
	}

	shell_print(shell, "app config counter-input-type %s", type);
}

int app_config_cmd_config_trigger_input_type(const struct shell *shell, size_t argc, char **argv)
{
	if (argc == 1) {
		print_trigger_input_type(shell);
		return 0;
	}

	if (argc == 2) {
		bool is_npn = !strcmp(argv[1], "npn");
		bool is_pnp = !strcmp(argv[1], "pnp");

		if (is_npn) {
			m_app_config_interim.trigger_input_type = APP_CONFIG_INPUT_TYPE_NPN;
		} else if (is_pnp) {
			m_app_config_interim.trigger_input_type = APP_CONFIG_INPUT_TYPE_PNP;
		} else {
			shell_error(shell, "invalid format");
			return -EINVAL;
		}

		return 0;
	}

	shell_help(shell);
	return -EINVAL;
}
{%- endif %}
{%- for parameter in parameters -%}

{#- BOOL TYPE #}
{%- if parameter['type'] == 'bool' %}
static void print_{{ parameter['var'] }}(const struct shell *shell)
{                                   
{%- raw -%}
{% endraw %}
	shell_print(shell, "{{parameter['domain']}} config {{ parameter['name'] }}  %s",
			m_app_config_interim.{{ parameter['var'] }} ? "true" : "false");                      
{%- raw -%}
{% endraw %}
}

int app_config_cmd_config_{{ parameter['var'] }}(const struct shell *shell, size_t argc, char **argv)
{
{%- raw -%}
{% endraw %}
	if (argc == 1) {
		print_{{ parameter['var'] }}(shell);                                                    
		return 0;
	}
	if (argc == 2) {
		bool is_false = !strcmp(argv[1], "false");
		bool is_true = !strcmp(argv[1], "true");
		if (is_false) {
			m_app_config_interim.{{ parameter['var'] }} = false;
		} else if (is_true) {
			m_app_config_interim.{{ parameter['var'] }} = true;
		} else {
			shell_error(shell, "invalid format");
			return -EINVAL;
		}
		return 0;
	}
	shell_help(shell);
	return -EINVAL;
}
{%- endif -%}

{#- INT TYPE #}
{%- if parameter['type'] == 'int' %}
static void print_{{ parameter['var'] }}(const struct shell *shell)
{                               
{%- raw -%}
{% endraw %}
	shell_print(shell, "{{parameter['domain']}} config {{ parameter['name'] }}  %d",
			m_app_config_interim.{{ parameter['var'] }});
{%- raw -%}
{% endraw %}
}

int app_config_cmd_config_{{ parameter['var'] }}(const struct shell *shell, size_t argc, char **argv)
{ 
{%- raw -%}
{% endraw %}
	if (argc == 1) {
		print_{{ parameter['var'] }}(shell);
		return 0;
	}
	if (argc == 2) {
		size_t len = strlen(argv[1]);
		for (size_t i = 0; i < len; i++) {
			if (!isdigit((int)argv[1][i])) {
				shell_error(shell, "invalid format");
				return -EINVAL;
			}
		}
		long value = strtol(argv[1], NULL, 10);
		if (value < {{ parameter['min'] }} || value > {{ parameter['max'] }}) {
			shell_error(shell, "invalid range");
			return -EINVAL;
		}
		m_app_config_interim.{{ parameter['var'] }} = (int)value;
		return 0;
	}
	shell_help(shell);
	return -EINVAL;
}
{%- endif -%}

{#- FLOAT TYPE #}
{%- if parameter['type'] == 'float' %}
static void print_{{ parameter['var'] }}(const struct shell *shell)
{                                  
{%- raw -%}
{% endraw %}
	shell_print(shell, "{{parameter['domain']}} config {{ parameter['name'] }} %.1f",
			m_app_config_interim.{{ parameter['var'] }});
{%- raw -%}
{% endraw %}
}

int app_config_cmd_config_{{ parameter['var'] }}(const struct shell *shell, size_t argc, char **argv)
{
{%- raw -%}
{% endraw %}
	if (argc == 1) {
		print_{{ parameter['var'] }}(shell);
		return 0;
	}
	if (argc == 2) {
		float value;
		int ret = sscanf(argv[1], "%f", &value);
		if (ret != 1) {
			shell_error(shell, "invalid value");
			return -EINVAL;
		}
		if (value < {{ parameter['min'] }} || value > {{ parameter['max'] }}) 
		{
			shell_error(shell, "invalid range");
			return -EINVAL;
		}
		m_app_config_interim.{{ parameter['var'] }} = value;
		return 0;
	}
	shell_help(shell);
	return -EINVAL;
}
{%- endif -%}

{#- STRING TYPE #}
{%- if parameter['type'] == 'string' %}
static void print_{{ parameter['var'] }}(const struct shell *shell)
{                                  
{%- raw -%}
{% endraw %}
	shell_print(shell, "{{parameter['domain']}} config {{ parameter['name'] }} %.1f",
			m_app_config_interim.{{ parameter['var'] }});
{%- raw -%}
{% endraw %}
}

int app_config_cmd_config_{{ parameter['var'] }}(const struct shell *shell, size_t argc, char **argv)
{
{%- raw -%}
{% endraw %}
	if (argc == 1) {
		print_{{ parameter['var'] }}(shell);
		return 0;
	}
	if (argc == 2) {
			size_t len = strlen(argv[1]);

			if (len >= sizeof(m_config_interim.{{ parameter['var'] }})) {
				shell_error(shell, "invalid format");
				return -EINVAL;
			}

			for (size_t i = 0; i < len; i++) {
				char c = argv[1][i];
				if (!isalnum((int)c) && c != '-' && c != '.') {
					shell_error(shell, "invalid format");
					return -EINVAL;
				}
			}

			strcpy(m_config_interim.{{ parameter['var'] }}, argv[1]);
			return 0;
		}
	shell_help(shell);
	return -EINVAL;
}
{%- endif -%}

{#- ARRAY[BOOL] TYPE #}
{%- if parameter['type'].split('[')[0] == 'array' and parameter['type'].split('[')[1][0:-1] == 'bool'%}
static void print_{{ parameter['var'] }}(const struct shell *shell, int channel)
{                                  
{%- raw -%}
{% endraw %}
	int ch = channel;

	for (int i = ch != 0 ? ch - 1 : 0; i < (ch != 0 ? ch : {{ parameter['len'] }}); i++) {
		shell_print(shell, "app config {{ parameter['name'] }} %d %s", i + 1,
				m_app_config_interim.{{ parameter['var'] }}[i] ? "true" : "false");
	}
{%- raw -%}
{% endraw %}
}

int app_config_cmd_config_{{ parameter['var'] }}(const struct shell *shell, size_t argc, char **argv)
{
	int channel;

	if (argc >= 2) {
		unsigned long ch = strtoul(argv[1], NULL, 10);

		if (ch < 0 || ch > {{ parameter['len'] }}) {
			shell_error(shell, "invalid channel index");
			return -EINVAL;
		}

		channel = ch;
	}

	if (argc == 2) {
		print_{{ parameter['var'] }}(shell, channel);
		return 0;
	}

	if (argc == 3 && strcmp(argv[2], "true") == 0) {
		int ch = channel;

		for (int i = ch != 0 ? ch - 1 : 0; i < (ch != 0 ? ch : {{ parameter['len'] }});
			 i++) {
			m_app_config_interim.{{ parameter['var'] }}[i] = true;
		}

		return 0;
	}

	if (argc == 3 && strcmp(argv[2], "false") == 0) {
		int ch = channel;

		for (int i = ch != 0 ? ch - 1 : 0; i < (ch != 0 ? ch : {{ parameter['len'] }});
			 i++) {
			m_app_config_interim.{{ parameter['var'] }}[i] = false;
		}

		return 0;
	}

	shell_help(shell);
	return -EINVAL;
}
{%- endif -%}

{#- ARRAY[INT] TYPE #}
{%- if parameter['type'].split('[')[0] == 'array' and parameter['type'].split('[')[1][0:-1] == 'int'%}
static void print_{{ parameter['var'] }}(const struct shell *shell, int channel)
{                                  
{%- raw -%}
{% endraw %}
	int ch = channel;

	for (int i = ch != 0 ? ch - 1 : 0; i < (ch != 0 ? ch : {{ parameter['len'] }}); i++) {
		shell_print(shell, "app config {{ parameter['name'] }} %d %d", i + 1,
				m_app_config_interim.{{ parameter['var'] }}[i]);
	}
{%- raw -%}
{% endraw %}
}

int app_config_cmd_config_{{ parameter['var'] }}(const struct shell *shell, size_t argc, char **argv)
{
	int channel;

	if (argc >= 2) {
		unsigned long ch = strtoul(argv[1], NULL, 10);

		if (ch < 0 || ch > {{ parameter['len'] }}) {
			shell_error(shell, "invalid channel index");
			return -EINVAL;
		}

		channel = ch;
	}

	if (argc == 2) {
		print_{{ parameter['var'] }}(shell, channel);
		return 0;
	}

	if (argc == 3) {
		long long val = strtoll(argv[2], NULL, 10);
		if (val < {{parameter['min']}} || val > {{parameter['max']}}) {
			shell_error(shell, "invalid range");
			return -EINVAL;
		}

		int ch = channel;

		for (int i = ch != 0 ? ch - 1 : 0; i < (ch != 0 ? ch : {{ parameter['len'] }});
			 i++) {
			m_app_config_interim.{{ parameter['var'] }}[i] = val;
		}

		return 0;
	}

	shell_help(shell);
	return -EINVAL;
}
{%- endif %}
{% endfor -%}

{#- CONFIG SHOW #}
int app_config_cmd_config_show(const struct shell *shell, size_t argc, char **argv)
{   
	{%-if config_mode%}
	print_app_config_mode(shell);
	{%- endif %}
	{%- for parameter in parameters %}
	{%- if parameter['type'].split('[')[0] == 'array' %}
	print_{{ parameter['var'] }}(shell, 0);
	{%- else %}
	print_{{ parameter['var'] }}(shell);
	{%- endif %}
	{%- endfor %}
	
	return 0;
}
{% raw %}
/* USER CODE BEGIN Functions 1 */
/* USER CODE END Functions 1 */
{% endraw %}
{#- H_COMMIT #}
static int h_commit(void)
{
	LOG_DBG("Loaded settings in full");
	memcpy(&g_app_config, &m_app_config_interim, sizeof(g_app_config));

	return 0;
}
{# H_SET #}
static int h_set(const char *key, size_t len, settings_read_cb read_cb, void *cb_arg) 
{
	int ret;
	const char *next;
	{%- if config_mode %}
	if (settings_name_steq(key, "mode", &next) && !next) {
		if (len != sizeof(m_app_config_interim.mode)) {
			return -EINVAL;
		}
		ret = read_cb(cb_arg, &m_app_config_interim.mode, len);
		if (ret < 0) {
			LOG_ERR("Call `read_cb` failed: %d", ret);
			return ret;
		}
		return 0;
	}
	{% endif %}
{%- for parameter in data['parameters'] %}
{%- if parameter['type'] == 'bool' or parameter['type'] == 'float' or parameter['type'] == 'int' or parameter['type'] == 'string'%}
	if (settings_name_steq(key, "{{ parameter['name'] }}", &next) && !next) {
		if (len != sizeof(m_app_config_interim.{{ parameter['var'] }})) {
			return -EINVAL;
		}
		ret = read_cb(cb_arg, &m_app_config_interim.{{ parameter['var'] }}, len);
		if (ret < 0) {
			LOG_ERR("Call `read_cb` failed: %d", ret);
			return ret;
		}
		return 0;
	}
{% endif %}
{%- if parameter['type'] == 'array[int]' or parameter['type'] == 'array[bool]' %}
{%- for i in range(parameter['len'])%}
	if (settings_name_steq(key, "{{parameter['name'].split('-')[0]}}-{{i}}-{{parameter['name'].split('-')[1:] | join('-')}}", &next) && !next) {
		if (len != sizeof(m_app_config_interim.{{ parameter['var'] }}[{{i}}])) {
			return -EINVAL;
		}
		ret = read_cb(cb_arg, &m_app_config_interim.{{ parameter['var']}}[{{i}}], len);
		if (ret < 0) {
			LOG_ERR("Call `read_cb` failed: %d", ret);
			return ret;
		}
		return 0;
	}    
{% endfor %}
{%- endif %}
{%- endfor %}
	/* USER CODE BEGIN Functions 2 */
	/* USER CODE END Functions 2 */

	return 0;
}
{# H_EXPORT #}
static int h_export(int (*export_func)(const char *name, const void *val, size_t val_len))
{
	int ret;
	{%- if config_mode %}
	ret = export_func("{{setting_pfx}}/mode", &m_app_config_interim.mode,
					  sizeof( m_app_config_interim.mode));
	if (ret < 0) {
		return ret;
	}
	{%-endif%}
{% for parameter in data['parameters'] -%}
{%- if parameter['type'] == 'bool' or parameter['type'] == 'float' or parameter['type'] == 'int'or parameter['type'] == 'string' %}
	ret = export_func("{{setting_pfx}}/{{parameter['name']}}", &m_app_config_interim.{{parameter['var']}},
					  sizeof( m_app_config_interim.{{parameter['var']}}));
	if (ret < 0) {
		return ret;
	}
{% endif %}
{%- if parameter['type'] == 'array[bool]' or parameter['type'] == 'array[int]' %}
	{%- for i in range(parameter['len']) %}
	ret = export_func("{{setting_pfx}}/{{parameter['name'].split('-')[0]}}-{{i}}-{{parameter['name'].split('-')[1:] | join('-')}}", &m_app_config_interim.{{parameter['var']}}[{{i}}],
					  sizeof( m_app_config_interim.{{parameter['var']}}[{{i}}]));
	if (ret < 0) {
		return ret;
	}
	{% endfor %}
{%- endif %}
{%- endfor %}
	/* USER CODE BEGIN Functions 3 */
	/* USER CODE END Functions 3 */

	return 0;
}
{# INIT #}
static int init(void) 
{
	int ret;

	LOG_INF("System initialization");

	static struct settings_handler sh = {
		.name = SETTINGS_PFX,
		.h_set = h_set,
		.h_commit = h_commit,
		.h_export = h_export,
	};

	ret = settings_register(&sh);

	if (ret < 0) {
		LOG_ERR("Call `settings_register` failed: %d", ret);
		return ret;
	}

	ret = settings_load_subtree(SETTINGS_PFX);

	if (ret < 0) {
		LOG_ERR("Call `settings_load_subtree` failed: %d", ret);
		return ret;
	}

	ctr_config_append_show(SETTINGS_PFX, app_config_cmd_config_show);

	/* USER CODE BEGIN Functions 4 */
	/* USER CODE END Functions 4 */

	return 0;
}

SYS_INIT(init, APPLICATION, CONFIG_APPLICATION_INIT_PRIORITY);